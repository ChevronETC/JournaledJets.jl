var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [JournaledJets]\nOrder = [:function,:macro]","category":"page"},{"location":"reference/#Base.close-Tuple{JArray}","page":"Reference","title":"Base.close","text":"Base.close(x::JArray)\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.block_delete_fromid!-Tuple{Any,Any,Any}","page":"Reference","title":"JournaledJets.block_delete_fromid!","text":"block_delete_fromid!(_id, _whence, iblock)\n\nRemove a block from the registry based on the block map id and block key\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.blocklength_from_id-Tuple{Any,Any}","page":"Reference","title":"JournaledJets.blocklength_from_id","text":"blocklength_from_id(id, iblock)\n\ncompute local block length based on blockmap id and local block id\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.blocksize_from_id-Tuple{Any,Any,Any}","page":"Reference","title":"JournaledJets.blocksize_from_id","text":"blocksize_from_id(id, iblock, idim)\n\ncompute local block size based on blockmap id and local block id and a given dimension\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.close_by_id-Tuple{Any}","page":"Reference","title":"JournaledJets.close_by_id","text":"close_by_id(id)\n\nDelete the work id from the registry if it hasnt already been deleted. Used when work finishes\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.fill_local_part-Tuple{Any,Any,Any}","page":"Reference","title":"JournaledJets.fill_local_part","text":"initialize_local_part(id, pids, nblocks::NTuple{N,Int}, ::Type{A}) where {N,A}\n\nCreate an empty block map for a given id in the registry\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.finish_local_part-Tuple{Any,Any}","page":"Reference","title":"JournaledJets.finish_local_part","text":"finish_local_part(id, indices)\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.getblock_and_delete_fromid!-Tuple{Any,Any,Any}","page":"Reference","title":"JournaledJets.getblock_and_delete_fromid!","text":"getblock_and_delete_fromid!(_id, _whence, iblock)\n\nPop a block off the registry based on the block map id and block key\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.getblockmap_from_id!-Tuple{Any,Any}","page":"Reference","title":"JournaledJets.getblockmap_from_id!","text":"getblockmap_from_id!(id, _blockmap)\n\nPull out a block map from the registry based on id\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.getindices-Tuple{Any,Tuple{T} where T,Any}","page":"Reference","title":"JournaledJets.getindices","text":"getindices(id, nblocks::NTuple{1}, blockmap)\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.getindices-Union{Tuple{N}, Tuple{Any,Tuple{Vararg{T,N}} where T,Any}} where N","page":"Reference","title":"JournaledJets.getindices","text":"getindices(id, nblocks::NTuple{N}, blockmap) where {N}\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.indices-Tuple{JArray}","page":"Reference","title":"JournaledJets.indices","text":"indices(A::JArray)\n\nreturn indices from JArray passed in\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.indices_from_id!-Tuple{Any,Any}","page":"Reference","title":"JournaledJets.indices_from_id!","text":"indices_from_id!(id, _indices)\n\nreturn indices from registry based on passed in id\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.initialize_local_part-Union{Tuple{A}, Tuple{N}, Tuple{Any,Any,Tuple{Vararg{Int64,N}},Type{A}}} where A where N","page":"Reference","title":"JournaledJets.initialize_local_part","text":"initialize_local_part(id, pids, nblocks::NTuple{N,Int}, ::Type{A}) where {N,A}\n\nCreate an empty block map for a given id in the registry\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.setblockmap_from_id!-Tuple{Any,Any}","page":"Reference","title":"JournaledJets.setblockmap_from_id!","text":"setblockmap_from_id!(id, _blockmap)\n\nAdd a block map to the registry based using id as the 'key'\n\n\n\n\n\n","category":"method"},{"location":"reference/#JournaledJets.update_blockmap_and_pids_fromid!-Tuple{Any,Any,Any}","page":"Reference","title":"JournaledJets.update_blockmap_and_pids_fromid!","text":"update_blockmap_and_pids_fromid!(_id, _whence, iblock)\n\nUpdate a block in the registry based on the block map id and block key with _whence\n\n\n\n\n\n","category":"method"},{"location":"reference/#Serialization.deserialize-Union{Tuple{J}, Tuple{A}, Tuple{N}, Tuple{T}, Tuple{Serialization.AbstractSerializer,Type{J}}} where J<:JArray{T,N,A} where A where N where T","page":"Reference","title":"Serialization.deserialize","text":"Serialization.deserialize(S::AbstractSerializer, ::Type{J}) where {T,N,A,J<:JArray{T,N,A}}\n\nDeserilization implementation for JArray struct\n\n\n\n\n\n","category":"method"},{"location":"reference/#Serialization.serialize-Union{Tuple{N}, Tuple{T}, Tuple{Serialization.AbstractSerializer,JArray{T,N,A} where A<:(AbstractArray{T,N} where N)}} where N where T","page":"Reference","title":"Serialization.serialize","text":"Serialization.serialize(S::AbstractSerializer, x::JArray{T,N}) where {T,N}\n\nSerilization implementation for JArray struct\n\n\n\n\n\n","category":"method"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"#JournaledJets.jl","page":"Home","title":"JournaledJets.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package contains distributed block operators and vectors for Jets.jl.  It builds on top of the block operators in Jets.jl, providing a parallel distributed, fault tolerant version of block operators and block vectors that are used to orchestrate distributed (in-memory) storage and compute.","category":"page"}]
}
